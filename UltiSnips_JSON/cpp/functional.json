[
    "function: wraps callable object of any type with specified function call signature", 
    "mem_fn: creates a function object out of a pointer to a member", 
    "bad_function_call: the exception thrown when invoking an empty std::function", 
    "invoke: invokes any Callable object with given arguments", 
    "bind: binds one or more arguments to a function object", 
    "is_bind_expression: indicates that an object is std::bind expression or can be used as one", 
    "is_placeholder: indicates that an object is a standard placeholder or can be used as one", 
    "_1, _2, _3, _4, ...: placeholders for the unbound arguments in a std::bind expression", 
    "reference_wrapper: CopyConstructible and CopyAssignable reference wrapper", 
    "refcref: creates a std::reference_wrapper with a type deduced from its argument", 
    [
        "plus: function object implementing x + y", 
        1, 
        "2015-08-02 09:34:38.752684"
    ], 
    "minus: function object implementing x - y", 
    "multiplies: function object implementing x * y", 
    "divides: function object implementing x / y", 
    "modulus: function object implementing x % y", 
    "negate: function object implementing -x", 
    "equal_to: function object implementing x == y", 
    "not_equal_to: function object implementing x != y", 
    "greater: function object implementing x > y", 
    "less: function object implementing x < y", 
    "greater_equal: function object implementing x >= y", 
    "less_equal: function object implementing x <= y", 
    "logical_and: function object implementing x && y", 
    "logical_or: function object implementing x || y", 
    "logical_not: function object implementing !x", 
    "bit_and: function object implementing x & y", 
    "bit_or: function object implementing x | y", 
    "bit_xor: function object implementing x ^ y", 
    "bit_not: function object implementing ~x", 
    "unary_negate: wrapper function object returning the complement of the unary predicate it holds", 
    "binary_negate: wrapper function object returning the complement of the binary predicate it holds", 
    "not1: constructs custom std::unary_negate object", 
    "not2: constructs custom std::binary_negate object"
]