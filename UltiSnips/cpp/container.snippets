
global !p
from complete import *
endglobal

priority 2
# don't add \b
snippet ":?:umap<" "std::unordered_map" r
std::unordered_map<${1:key}, ${2:value}>
endsnippet

priority 1
snippet "\bumap<" "std::unordered_map" r
unordered_map<${1:key}, ${2:value}>
endsnippet

priority 2
snippet ":?:uset<" "std::unordered_set" r
std::unordered_set<${1:Type}>
endsnippet

priority 1
snippet "\buset<" "std::unordered_set" r
unordered_set<${1:Type}>
endsnippet

priority 2
snippet ":?:forw(a(r(d(_(l(i(s(t)?)?)?)?)?)?)?)?<" "std::forward_list" r
std::forward_list<${1:Type}>
endsnippet

priority 1
snippet "\bforw(a(r(d(_(l(i(s(t)?)?)?)?)?)?)?)?<" "std::forward_list" r
forward_list<${1:Type}>
endsnippet

priority 2
snippet ":?:li(s(t)?)?<" "std::list" r
std::list<${1:Type}>
endsnippet

priority 1
snippet "\bli(s(t)?)?<" "std::list" r
list<${1:Type}>
endsnippet

priority 2
snippet ":?:set<" "std::set" r
std::set<${1:Type}>
endsnippet

priority 1
snippet "\bset<" "std::set" r
set<${1:Type}>
endsnippet

priority 2
snippet ":?:map<" "std::map" r
std::map<${1:key}, ${2:value}>
endsnippet

priority 1
snippet "\bmap<" "std::map" r
map<${1:key}, ${2:value}>
endsnippet

priority 2
snippet ":?:vec(t(o(r)?)?)?<" "std::vector" r
std::vector<${1:Type}>
endsnippet

priority 1
snippet "\bvec(t(o(r)?)?)?<" "std::vector" r
vector<${1:Type}>
endsnippet

priority 1
snippet ":?:it" "Iterator" r
::iterator
endsnippet

priority 2
snippet ":?:cit" "Const Iterator" r
::const_iterator
endsnippet

priority 2
snippet "\bforit" "For Loop Using Iterator" rb
for(${2:auto} ${3:it}=${1:obj}.begin(); $3!=$1.end(); ++$3){
	${4:/* code */}
}
endsnippet

priority 3
snippet "\bforcit" "For Loop Using Const Iterator" rb
for(${2:auto} ${3:it}=${1:obj}.cbegin(); $3!=$1.cend(); ++$3){
	${4:/* code */}
}
endsnippet

priority 1
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

priority 1
snippet "\bfore(r(a(s(e)?)?)?)?" "Erase in Loop" rb
for(${2:auto} ${3:it}=${1:container}.begin(); $3!=$1.end(); ){
	$2 ${4:cit} = $3;
	++$3;
	if(${5:$4}){
		$1.erase($4);
	}
}
endsnippet
