
global !p
from complete import *
endglobal

priority 1
snippet "\balgo(r(i(t(h(m)?)?)?)?)?\." "STL Algorithms" r
std::$1`!p snip.rv = complete(t[1], file="cpp/algorithm.json")`
endsnippet

priority 2
snippet ":max_e(l(e(m(e(n(t)?)?)?)?)?)?" "std::max_element" r
std::max_element(${1:first}, ${2:last}${3:, [${9:capture}](${4:Type1 const &} ${5:a}, ${6:Type2 const &} ${7:b}){
	${8:/* code */}
}})
endsnippet

priority 1
snippet "\bmax_e(l(e(m(e(n(t)?)?)?)?)?)?" "std::max_element" r
max_element(${1:first}, ${2:last}${3:, [${9:capture}](${4:Type1 const &} ${5:a}, ${6:Type2 const &} ${7:b}){
	${8:/* code */}
}})
endsnippet

priority 2
snippet ":min_e(l(e(m(e(n(t)?)?)?)?)?)?" "std::min_element" r
std::min_element(${1:first}, ${2:last}${3:, [${9:capture}](${4:Type1 const &} ${5:a}, ${6:Type2 const &} ${7:b}){
	${8:/* code */}
}})
endsnippet

priority 1
snippet "\bmin_e(l(e(m(e(n(t)?)?)?)?)?)?" "std::min_element" r
min_element(${1:first}, ${2:last}${3:, [${9:capture}](${4:Type1 const &} ${5:a}, ${6:Type2 const &} ${7:b}){
	${8:/* code */}
}})
endsnippet

priority 1
snippet "\bsort" "std::sort" rb
sort(${1:first}, ${2:last}${3:, [${9:capture}](${4:Type1 const &} ${5:a}, ${6:Type2 const &} ${7:b}){
	${8:/* code */}
}});
endsnippet

priority 2
snippet ":sort" "std::sort" rb
std::sort(${1:first}, ${2:last}${3:, [${9:capture}](${4:Type1 const &} ${5:a}, ${6:Type2 const &} ${7:b}){
	${8:/* code */}
}});
endsnippet

priority 2
snippet "(?i):count" "count number of elements" rb
std::count(${1:container}.cbegin(), $1.cend(), ${2:value});
endsnippet

priority 1
snippet "(?i)\bcount" "count number of elements" rb
count(${1:container}.cbegin(), $1.cend(), ${2:value});
endsnippet

priority 1
snippet "(?i)\bcount_(i(f)?)?" "Count elements satisfying specified condition" rb
count_if(${1:nodes}.cbegin(), $1.cend(), [${5:capture}](${2:Type} ${3:value}){
	${4:// code}
});
endsnippet

priority 1
snippet "(?i):count_(i(f)?)?|cif" "Count elements satisfying specified condition" rb
std::count_if(${1:nodes}.cbegin(), $1.cend(), [${5:capture}](${2:Type} ${3:value}){
	${4:// code}
});
endsnippet

priority 1
snippet "(?i)\blam(b(d(a)?)?)?|\[\]" "Description" r
[${1:capture}](${2:params}){
	${3:/* code */} 
} 
endsnippet
