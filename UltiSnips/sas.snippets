
extends programming

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

global !p
from complete import *
endglobal

# library snippets

snippet "lib(n(a(m(e)?)?)?)?" "libname" !rb
libname $1`!p snip.rv = complete(t[1], ["_all_"])`
endsnippet

snippet "(libname \w)" "libname" !rb
`!p snip.rv = match.group(1)` $1`!p snip.rv = complete(t[1], ["clear", "list"])`
endsnippet

snippet ls "Lib on Server" b
libname ${1:ls} "/risk/aml/user_aml/dclong/${2:$1}/data";
endsnippet

snippet ll "Lib on Localhost" b
libname ${1:ll} "/cygdrive/c/Users/zkyr9jm/Documents/projects/${2:$1}/data";
endsnippet

# data step snippets
snippet "d(a(t(a)?)?)?" "Data Step" !rb
data ${1:data_set_name};
    $2`!p snip.rv = complete(t[2], ["input", "merge", "set"])`$3
run;
endsnippet

# @TODO there is a trailing space issue here!!!
snippet input "Input in a Data Step" !b
input ${1:variable_name};
datalines;
${2:/*type in data here*/}
;
endsnippet

# procedure snippets

snippet "p(r(o(c)?)?)?" "Procedure" !rb
proc $1`!p snip.rv = complete(t[1], ["fcmp", "freq", "format", "glm", "iml", "logistic", "means", "mixed", "print", "rank", "reg", "sql", "sort", "transpose", "univariate"])`
endsnippet

snippet "proc fcmp" "The FCMP Procedure" !b
proc fcmp outlib = ${1:lib}.${2:funcs}.${3:category};
    $4
run;
endsnippet

snippet "proc sort" "The SORT Procedure" !b
proc sort ${1:data = data_set_name} ${2:out = ${3:output_data_set_name}};
    by ${1:column_name};
run;
endsnippet

snippet "proc sql" "The SQL Procedure" !b
proc sql;
    select ${1:distinct }${2:top ${3:5} }${4:*}
    from
        ${5:t1}
    ${6:${7:inner join
        ${8:t2}
    on
        ${9:condition}}
    ${10:where
        ${11:condition}}}
    ${12:group by
        ${13:1}
    ${14:having
        ${15:condition}}}
    ${16:order by
        ${17:1} ${18:desc}}
    ;
quit;
endsnippet

snippet "proc print" "The Print Procedure" !b
proc print data = ${1:d} ${2:(${3:where=(${4:condition})} ${5:obs=${6:5}})};
    title "${7:$1}";
run;
endsnippet

snippet 'pp(\d+)' "Print Top n Rows" !rb
proc print data = ${1:d} ${2:(obs=${3:`!p snip.rv = match.group(1)`})};
    title "${4:$1}";
run;
endsnippet

snippet ppw "Print with Where" b
proc print data = ${1:d} ${2:(where=(${3: }))};
    title "${4:$1}";
run;
endsnippet

# macro defintion snippets
snippet '%?m(a(c(r(o)?)?)?)?' "Macro Definition Without Arguments" !rb
%macro ${1:macro_name}(${2:arg1});
    ${3:/* start here */} 
%mend $1;
endsnippet

snippet %a "%array" !b
%array(${1:arr}${2:, data=${3:d}}${4:, var=${5:v}}${6:, values=${7:l}}${8:, delim=%str(${9: })}${10:, debug=${11:N}}${12:, numlist=${13:Y}});
endsnippet

snippet %av "%array" !b
%array(${1:arr}, values=${7:v});
endsnippet

snippet %o "%do_over" !b
%do_over(${1:arr}${2:, values=${3:v}}${4:, delim=%str(${5: })}${6:, phrase=${7:?}}${8:, escape=${9:?}}${10:, between=${11:b}}${12:, macro=${13:m}}${14:, keyword=$15})
endsnippet

snippet %om "%do_over" !b
%do_over(${1:arr}, macro=${2:m})
endsnippet

snippet %omb "%do_over" !b
%do_over(${1:arr}, macro=${2:m}, between=${3: })
endsnippet

snippet %op "%do_over" !b
%do_over(${1:arr}, phrase=${2:?})
endsnippet

snippet %pct "Macro %percentile" !b
%percentile(data=${1:d}${2:, var=$3}${4:, pctArr=$5}${6:, pctList=$7});
endsnippet

snippet %temp "A Temp Macro" !b
%macro temp;
%do i = 1 %to &msN.;
    %let m = &&ms&i;
    %let out = n3d.bd_tran_pty_&m.;
	%ptran(data=n3d.tran_&m., bp=B, cd=D, out=&out.);
	%percentile(data=&out., var=tot_amt, output=bd_pctl_pty_&m., pctArr=pcts);
%end;
%mend temp;
%temp;
endsnippet

snippet "%d(o( (l(o(o(p)?)?)?)?)?)?|%f(o(r (l(o(o(p)?)?)?)?)?)?" "Do Loop" !rb
%do ${1:i} = ${2:1} %to ${3:2} %by ${4:1};
    ${5:...}
%end;
endsnippet

# do; ... end;
snippet db "Do End Group" b
do;
    ${1:...}
end;
endsnippet

snippet 'dl|for' "Do Loop" rb
do ${1:i} = ${2:1} to ${3:2} by ${4:1};
    ${5:...}
end;
endsnippet

snippet until "Do Until Loop" b
do until (${1:condition});
    ${2:...}
end;
endsnippet

snippet while "Do While Loop" b
do while (${1:condition});
    ${2:...}
end;
endsnippet

 
snippet fm "Filename of Macro Directory" !b
filename macro "/risk/aml/user_aml/dclong/macro";
endsnippet

snippet "%p(u(t)?)?" "%put" !rb
%put $1`!p snip.rv = complete(t[1], ["_user_", "_automatic_", "_global_", "_local_"])`;
endsnippet

snippet %im "Include Macro" !b
%include ${1:macro}($2.sas);
endsnippet

snippet %ima "Include %array" !b
%include ${1:macro}(array.sas);
endsnippet

snippet %imo "Include %array" !b
%include ${1:macro}(do_over.sas);
endsnippet

snippet %imn "Include %array" !b
%include ${1:macro}(numlist.sas);
endsnippet

snippet 'c1|/1|/\*1' "Description" !rb
/*${1: }*/
endsnippet

snippet 'c2|/2|/\*2' "Description" !rb
/*${1: }
*/
endsnippet

snippet 'c3|/3|/\*3' "Description" !rb
/*
${1: }
*/
endsnippet

snippet '\/\*|cb' "Comment Block" !rb
/*
${1:@author ${2:Ben Chuanlong Du}}
${3:@description $4} 
${5:@param $6}
${7:@return $8}
${9:@write $10}
*/
endsnippet

snippet if "If Statement" !b
if ${1:condition} then
	$2;
endsnippet

snippet ife "If Else Statement" !b
if ${1:condition} then
	$2;
else
	$3;
endsnippet

snippet sort "Proc Sort" !b
proc sort data = ${1:d} ${2:out = ${3:o}};
	title "${4:$1 Sorted}";
	by ${5:descending} ${6:var};
run;
endsnippet

snippet "f(u(n(c(t(i(o(n)?)?)?)?)?)?)?" "Function Definition" !rb
function ${1:f}(${2:arg1}${3:$})${4:$};
    $5
    return(${6:rv});
endsub;
endsnippet

snippet "s(u(b(r(o(u(t(i(n(e)?)?)?)?)?)?)?)?)?" "Subroutine Definition" !rb
subroutine ${1:f}(${2:arg1}${3:$})${4:$};
    $5
    return(${6:rv});
endsub;
endsnippet

snippet "o(p(t(i(o(n(s)?)?)?)?)?)?" "Methods of options" !rb
options $1`!p snip.rv = complete(t[1], ["append=", "appletloc=", "authproviderdomain", "autosaveloc=", "binding=", "bottommargin=", "bufno=", "bufsize=", "byerr", "byline", "bysorted", "caps", "cardimage", "catcache=", "cbufno=", "center", "cgoptimize=", "charcode", "cleanup", "cmplib=", "cmpmodel=", "cmpopt=", "collate", "colorprinting", "compress=", "copies=", "cpucount=", "cpuid", "datastmtchk=", "date", "datestyle=", "deflation=", "details", "device=", "dkricond=", "dkrocond=", "dldmgaction=", "dmr", "dms", "dmsexp", "dmslogsize=", "dmsoutsize=", "dmspgmlinesize=", "dmssynchk", "dsnferr", "dtreset", "duplex", "echoauto", "emailauthprotocol=", "emailfrom", "emailhost=", "emailid=", "emailport", "emailpw=", "engine=", "errorabend", "errorbyabend", "errorcheck=", "errors=", "explorer", "filesync=", "firstobs=", "fmterr", "fmtsearch=", "fontembedding", "fontrendering=", "fontsloc=", "formchar=", "formdlim=", "forms=", "gstyle", "gwindow", "helpbrowser=", "helpencmd", "helphost", "helpport=", "httpserverportmax=", "httpserverportmin=", "ibufno=", "ibufsize=", "initcmd", "initstmt=", "insert=", "intervalds=", "invaliddata=", "jpegquality=", "label", "_last_=", "leftmargin=", "linesize=", "logparm=", "lrecl=", "maps=", "mergenoby", "missing=", "msglevel=", "multenvappl", "news=", "notes", "number", "obs=", "orientation=", "ovp", "pagebreakinitial", "pageno=", "pagesize=", "paperdest=", "papersize=", "papersource=", "papertype=", "parm=", "parmcards=", "pdfaccess", "pdfassembly", "pdfcomment", "pdfcontent", "pdfcopy", "pdffillin", "pdfpagelayout=", "pdfpageview=", "pdfpassword=", "pdfprint=", "pdfsecurity=", "primaryproviderdomain=", "printerpath=", "printinit", "printmsglist", "quotelenmax", "replace", "reuse=", "rightmargin=", "rlang", "rsasuser", "s=", "s2=", "s2v=", "sashelp=", "sasuser=", "seq=", "setinit", "skip=", "solutions", "sortdup=", "sortequals", "sortsize=", "sortvalidate", "source", "source2", "spool", "sqlconstdatetime", "sqlreduceput=", "sqlreduceputobs=", "sqlreduceputvalues=", "sqlremerge", "sqlundopolicy=", "startlib", "stepchkpt", "stepchkptlib=", "steprestart", "sumsize=", "svgcontrolbuttons", "svgheight=", "svgpreserveaspectratio=", "svgtitle=", "svgviewbox=", "svgwidth=", "svgx=", "svgy=", "syntaxcheck", "sysprintfont=", "terminal", "termstmt=", "textureloc=", "threads", "toolsmenu", "topmargin=", "trainloc=", "universalprint", "uprintcompression", "user=", "utilloc=", "uuidcount=", "uuidgendhost=", "v6createupdate=", "validfmtname=", "validvarname=", "varlenchk=", "viewmenu", "vnferr", "work=", "workinit", "workterm", "yearcutoff="])`
endsnippet

snippet "(data \w )\(" "Methods of data" !rb
`!p snip.rv = match.group(1)`($1`!p snip.rv = complete(t[1], ["alter=", "bufno=", "bufsize=", "cntllev=", "compress=", "dldmgaction=", "encrypt=", "genmax=", "gennum=", "index=", "label=", "obsbuf=", "outrep=", "pw=", "pwreq=", "read=", "repempty=", "replace=", "reuse=", "sortedby=", "spill=", "tobsno=", "type=", "write=", "fileclose=", "firstobs=", "in=", "obs=", "pointobs=", "where=", "whereup=", "idxname=", "idxwhere=", "drop=", "keep=", "rename="])`)
endsnippet

